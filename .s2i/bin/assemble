#!/bin/bash

set -x
set -eo pipefail

APP_ROOT=${APP_ROOT:-/opt/app-root}
CONDA_ROOT=${CONDA_ROOT:-${APP_ROOT}/miniconda3}

time rm -rf /tmp/src/.git*
time rm -rf /tmp/Pipfile.lock
time rm -rf /tmp/requirements.txt
time rm -rf $HOME/.cache/yarn
time rm -rf $HOME/.node-gyp
time rm -rf /tmp/scripts
time mv /tmp/src/.s2i/bin /tmp/scripts
time chown -R 1001:0 ${APP_ROOT}
time fix-permissions ${APP_ROOT} -P
time rpm-file-permissions
time chown -R 1001 /tmp/src
time chgrp -R 0 /tmp/src
time chmod -R g+w /tmp/src

npm cache clean --force

mv /tmp/src/jupyter_notebook_config.py ${APP_ROOT}/etc/
mv /tmp/src/jupyter_kernel_gateway_config.py ${APP_ROOT}/etc/
mv /tmp/src/httpd-webdav.conf ${APP_ROOT}/etc/

# This S2I assemble script is only used when creating the custom image.
# For when running the image, or using it as a S2I builder, we use a second
# set of custom S2I scripts. We now need to move these into the correct
# location and have the custom image use those by dropping in an image
# metadata file which overrides the labels of the base image.

mkdir -p ${APP_ROOT}/.s2i

mv /tmp/src/builder/image_metadata.json ${APP_ROOT}/.s2i/image_metadata.json
mv /tmp/src/builder ${APP_ROOT}/builder
mv /tmp/src/supervisor ${APP_ROOT}/etc/supervisor
mv /tmp/src/gateway ${APP_ROOT}/gateway
mv /tmp/src/*.sh ${APP_ROOT}/bin

# Install oc command line client for OpenShift cluster.
curl -s -o ${APP_ROOT}/oc.tar.gz https://mirror.openshift.com/pub/openshift-v3/clients/3.11.374/linux/oc.tar.gz && \
    tar -C ${APP_ROOT}/bin -zxf ${APP_ROOT}/oc.tar.gz oc && \
    mv ${APP_ROOT}/bin/oc ${APP_ROOT}/bin/oc-3.11 && \
    rm ${APP_ROOT}/oc.tar.gz

curl -s -o ${APP_ROOT}/oc.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz && \
    tar -C ${APP_ROOT}/bin -zxf ${APP_ROOT}/oc.tar.gz oc && \
    mv ${APP_ROOT}/bin/oc ${APP_ROOT}/bin/oc-4 && \
    rm ${APP_ROOT}/oc.tar.gz

ln -s ${APP_ROOT}/bin/oc-wrapper.sh ${APP_ROOT}/bin/oc

curl -Ls -o /tmp/kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.9.4/kustomize_v3.9.4_linux_amd64.tar.gz && \
    tar -C ${APP_ROOT}/bin -zxf /tmp/kustomize.tar.gz kustomize && \
    rm /tmp/kustomize.tar.gz

# Ensure passwd/group file intercept happens for any shell environment.

echo "source ${APP_ROOT}/etc/generate_container_user" >> ${APP_ROOT}/etc/scl_enable

# Install packages required by the proxy process.
cd ${APP_ROOT}/gateway
npm install --production

# Create additional directories.

echo " -----> Creating additional directories."

mkdir -p ${APP_ROOT}/data

# Generate default supervisord.conf file.
${APP_ROOT}/bin/echo_supervisord_conf | \
    sed -e 's%^logfile=/tmp/supervisord.log%logfile=/dev/fd/1%' \
        -e 's%^logfile_maxbytes=50MB%logfile_maxbytes=0%' > \
        ${APP_ROOT}/etc/supervisord.conf

cat >> ${APP_ROOT}/etc/supervisord.conf << EOF

[include]
files = ${APP_ROOT}/etc/supervisor/*.conf
EOF

# Enable default nbextensions, extensions configurator
jupyter contrib nbextension install --sys-prefix
jupyter nbextension install --sys-prefix https://raw.githubusercontent.com/vpavlin/jupyter-publish-extension/master/publish.js
jupyter nbextension enable  --sys-prefix publish
jupyter nbextensions_configurator enable --sys-prefix
jupyter lab build

# Apply custom notebook configuration

if [ -d "${APP_ROOT}/src/.jupyter/" ]; then
    rsync \
        --link-dest="${APP_ROOT}/src/.jupyter/" \
        --recursive \
        --verbose \
        "${APP_ROOT}/src/.jupyter/" ${APP_ROOT}/etc/jupyter
fi


# Make sure the S2I source directory is empty as we will use the image
# produced to run further S2I builds.

(shopt -s dotglob ; rm -rf ${APP_ROOT}/src/*)

# Fixup permissions on directories and files.

#fix-permissions ${APP_ROOT} -P
